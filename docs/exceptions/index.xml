<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exceptions on Binary Stars</title>
    <link>https://itssamuelrowe.github.io/binarystars/exceptions/</link>
    <description>Recent content in Exceptions on Binary Stars</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://itssamuelrowe.github.io/binarystars/exceptions/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Understanding Exceptions</title>
      <link>https://itssamuelrowe.github.io/binarystars/exceptions/understanding-exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/binarystars/exceptions/understanding-exceptions/</guid>
      <description>In Java, errors of all types are generalized into a special type of object known as an exception.
An exception is an object which represents an unexpected event. It occurs when your program is running. It disturbs the flow of your program. Exceptions are used to indicate many types of error conditions.
An exception is represented by an object. It holds the information about the event such as the condition, the stacktrace, the location, and a message.</description>
    </item>
    
    <item>
      <title>Advantages of Exceptions</title>
      <link>https://itssamuelrowe.github.io/binarystars/exceptions/advantages-of-exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/binarystars/exceptions/advantages-of-exceptions/</guid>
      <description>The advantages of exceptions are as follows.
You can separate error handling from your algorithm. With exceptions you can separate the details of what happens when an unexpected situation occurs. You can separate such logic from the main logic of your program.
In other programming languages, error detection, reporting, and handling often lead to complex and confusing code.
Exceptions allow you to keep your source code clean and organized.</description>
    </item>
    
    <item>
      <title>Understanding Exception Types</title>
      <link>https://itssamuelrowe.github.io/binarystars/exceptions/understanding-exception-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/binarystars/exceptions/understanding-exception-types/</guid>
      <description>An exception object contains the information about the error condition. It includes information such as stacktrace and message. Perhaps, the most important information is the cause of the error. It is indicated by the name of the exception class used to create the exception object. Usually, you will use exception objects only to figure out the kind of error that occurred.
In order to understand exceptions fully, you need to understand the class hierarchy of exceptions first.</description>
    </item>
    
    <item>
      <title>Using the Catch Clause</title>
      <link>https://itssamuelrowe.github.io/binarystars/exceptions/using-the-catch-clause/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/binarystars/exceptions/using-the-catch-clause/</guid>
      <description>Before you learn to catch exceptions in your program, you need to see what happens when you don&amp;rsquo;t catch them. Here is an example which generates an exception.
public class GenerateException { public static void main(String ... arguments) { int a = 100; int b = 0; int c = a / b; } }  When the Java Virtual Machine tries to evalute a / b, it throws an exception because you tried to divide an integer by zero.</description>
    </item>
    
    <item>
      <title>Throwing Exceptions</title>
      <link>https://itssamuelrowe.github.io/binarystars/exceptions/throwing-exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/binarystars/exceptions/throwing-exceptions/</guid>
      <description>So far, you have only learnt to catch exceptions. In particular, the exceptions that were thrown by Java. However, you can throw an exception manually, using the throw statement.
The general form of throw statement is shown here.
throw expression;  The throw statement is a simple statement. Therefore, it is terminated by a semicolon.
Here, the expression must evaluates to an object whose type inherits Throwable. It can be an instance of the Throwable class itself.</description>
    </item>
    
    <item>
      <title>Understanding Checked and Unchecked Exceptions</title>
      <link>https://itssamuelrowe.github.io/binarystars/exceptions/understanding-checked-and-unchecked-exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/binarystars/exceptions/understanding-checked-and-unchecked-exceptions/</guid>
      <description>An unchecked exception is an exception which you can handle if you want. Any exception class which inherits the RuntimeException class is an unchecked exception. The compiler doesn&amp;rsquo;t force you to handle it. Methods that throw such exceptions don&amp;rsquo;t have to declare that they throw them. It is assumed that the application cannot do anything to recover from such exceptions at runtime. So far, all the exceptions you have used are unchecked exceptions.</description>
    </item>
    
    <item>
      <title>Using the Finally Clause</title>
      <link>https://itssamuelrowe.github.io/binarystars/exceptions/using-the-finally-clause/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://itssamuelrowe.github.io/binarystars/exceptions/using-the-finally-clause/</guid>
      <description>When an exception is thrown, the execution of your code jumps abruptly, possibly from one method to another method. This means some important segment of your code may be skipped. This could be a problem in some methods.
For example, if a method opens a file in the beginning and closes it before returning, then you will not want the code that closes the file to be skipped by an exception.</description>
    </item>
    
  </channel>
</rss>